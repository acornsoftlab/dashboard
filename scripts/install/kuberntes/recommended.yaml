apiVersion: v1
kind: Namespace
metadata:
  name: acornsoft-dashboard

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dashboard
  name: dashboard
  namespace: acornsoft-dashboard

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    app: dashboard
  name: dashboard-certs
  namespace: acornsoft-dashboard
type: Opaque

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    app: dashboard
  name: dashboard-csrf
  namespace: acornsoft-dashboard
type: Opaque
data:
  csrf: ""

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    app: dashboard
  name: dashboard-key-holder
  namespace: acornsoft-dashboard
type: Opaque

---

kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app: dashboard
  name: dashboard-settings
  namespace: acornsoft-dashboard

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app: dashboard
  name: dashboard
  namespace: acornsoft-dashboard
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["dashboard-key-holder", "dashboard-certs", "dashboard-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update 'dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["dashboard-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "metrics-scraper", "http:metrics-scraper"]
    verbs: ["get"]

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app: dashboard
  name: acornsoft-dashboard
rules:
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: dashboard
  name: dashboard
  namespace: acornsoft-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dashboard
subjects:
  - kind: ServiceAccount
    name: dashboard
    namespace: acornsoft-dashboard

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: acornsoft-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: acornsoft-dashboard
subjects:
  - kind: ServiceAccount
    name: dashboard
    namespace: acornsoft-dashboard

---

kind: Service
apiVersion: v1
metadata:
  labels:
    app: dashboard
  name: dashboard
  namespace: acornsoft-dashboard
spec:
  type: NodePort
  ports:
    - name: http
      nodePort: 30090
      port: 9090
      protocol: TCP
      targetPort: 9090
  selector:
    app: dashboard

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dashboard
  name: dashboard
  namespace: acornsoft-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: dashboard
  template:
    metadata:
      labels:
        app: dashboard
    spec:
      containers:
        - name: dashboard
          image: ghcr.io/acornsoftlab/acornsoft-dashboard.dashboard:v0.1.1
          imagePullPolicy: Always
          env:
          - name: SIDECAR_HOST
            value: "http://metrics-scraper:8000"
          ports:
            - containerPort: 9090
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     scheme: HTTP
          #     path: /
          #     port: 9090
          #   initialDelaySeconds: 30
          #   timeoutSeconds: 30
          volumeMounts:
            - name: dashboard-kubeconfig
              mountPath: /app/.kube
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: dashboard-kubeconfig
          configMap:
            name: acornsoft-dashboard-kubeconfig
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: dashboard
      nodeSelector:
        "kubernetes.io/os": linux

---

kind: Service
apiVersion: v1
metadata:
  labels:
    app: metrics-scraper
  name: metrics-scraper
  namespace: acornsoft-dashboard
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    app: metrics-scraper

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    app: metrics-scraper
  name: metrics-scraper
  namespace: acornsoft-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metrics-scraper
  template:
    metadata:
      labels:
        app: metrics-scraper
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'
    spec:
      containers:
        - name: metrics-scraper
          image: ghcr.io/acornsoftlab/acornsoft-dashboard.metrics-scraper:v0.1.1
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
            - name: dashboard-kubeconfig
              mountPath: /app/.kube
      volumes:
        - name: dashboard-kubeconfig
          configMap:
            name: acornsoft-dashboard-kubeconfig
      serviceAccountName: dashboard
      nodeSelector:
        "kubernetes.io/os": linux

---

kind: Service
apiVersion: v1
metadata:
  labels:
    app: backend
  name: backend
  namespace: acornsoft-dashboard
spec:
  type: NodePort
  ports:
    - name: http
      nodePort: 30081
      port: 3001
      protocol: TCP
      targetPort: 3001
  selector:
    app: backend

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    app: backend
  name: backend
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: ghcr.io/acornsoftlab/acornsoft-dashboard.backend:v0.1.1
          imagePullPolicy: Always
          ports:
            - containerPort: 3001
              protocol: TCP
          volumeMounts:
          - name: dashboard-kubeconfig
            mountPath: /app/.kube
          - mountPath: /tmp
            name: tmp-volume
      nodeSelector:
        "kubernetes.io/os": linux
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: dashboard-kubeconfig
          configMap:
            name: acornsoft-dashboard-kubeconfig

---

kind: Service
apiVersion: v1
metadata:
  labels:
    app: frontend
  name: frontend
  namespace: acornsoft-dashboard
spec:
  type: NodePort
  ports:
    - name: http
      nodePort: 30080
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: frontend

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    app: frontend
  name: frontend
  namespace: acornsoft-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: ghcr.io/acornsoftlab/acornsoft-dashboard.frontend:v0.1.1
          imagePullPolicy: Always
          env:
          - name: BACKEND_PORT
            value: "30081"
          - name: DASHBOARD_PORT
            value: "30090"
          - name: KIALI_PORT
            value: "32080"
          ports:
            - containerPort: 3001
              protocol: TCP
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
      nodeSelector:
        "kubernetes.io/os": linux
      volumes:
        - name: tmp-volume
          emptyDir: {}
