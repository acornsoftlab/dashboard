kind: Service
apiVersion: v1
metadata:
  labels:
    app: {{ .Chart.Name }}
    kore.board: backend
  name: backend
  namespace: {{ .Release.Namespace }}
spec:
  type: {{ .Values.backend.service.type }}
  ports:
    - name: http
{{- if hasKey .Values.backend.service "nodePort" }}
      nodePort: {{ .Values.backend.service.nodePort }}
{{- end }}
      port: 3001
      protocol: TCP
      targetPort: 3001
  selector:
    app: {{ .Chart.Name }}
    kore.board: backend

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    app: {{ .Chart.Name }}
    kore.board: backend
  name: backend
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      kore.board: backend
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        kore.board: backend
    spec:
      containers:
        - name: backend
          image: ghcr.io/acornsoftlab/kore-board.backend:{{ .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --kubeconfig=/app/.kube/config
            - --metrics-scraper-url=http://metrics-scraper:8000
            - --log-level=info
          ports:
            - containerPort: 3000
              protocol: TCP
          volumeMounts:
            - mountPath: /app/.kube/config
              name: kubeconfig
              subPath: config
            - mountPath: /tmp
              name: tmp-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: kubeconfig
          configMap:
            name: kore-board-kubeconfig
            items:
            - key: config
              path: config
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: {{ .Chart.Name }}
      nodeSelector:
        "kubernetes.io/os": linux
